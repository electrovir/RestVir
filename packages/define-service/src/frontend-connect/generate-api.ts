import {
    mapObjectValues,
    MaybePromise,
    Overwrite,
    PartialWithUndefined,
    type Values,
} from '@augment-vir/common';
import type {EndpointDefinition, GenericEndpointDefinition} from '../endpoint/endpoint.js';
import type {ServiceDefinition} from '../service/service-definition.js';
import {createMockEndpointFetch, createMockEndpointResponse} from '../util/mock-fetch.js';
import type {CommonWebSocket} from '../web-socket/common-web-socket.js';
import {
    ClientWebSocket,
    GenericConnectWebSocketParams,
} from '../web-socket/overwrite-web-socket-methods.js';
import type {WebSocketDefinition} from '../web-socket/web-socket-definition.js';
import {CollapsedConnectWebSocketParams, connectWebSocket} from './connect-web-socket.js';
import {
    CollapsedFetchEndpointParams,
    fetchEndpoint,
    FetchEndpointOutput,
    GenericFetchEndpointParams,
} from './fetch-endpoint.js';

/**
 * An API generated by {@link generateApi}. This can be easily mocked by wrapping this API in
 * {@link makeMockApi}.
 *
 * @category Internal
 * @category Package : @rest-vir/define-service
 * @package [`@rest-vir/define-service`](https://www.npmjs.com/package/@rest-vir/define-service)
 */
export type RestVirApi<SpecificService extends ServiceDefinition> = {
    endpoints: {
        [EndpointPath in keyof SpecificService['endpoints']]: SpecificService['endpoints'][EndpointPath] extends GenericEndpointDefinition
            ? SpecificService['endpoints'][EndpointPath] & {
                  /** Send a fetch request to this endpoint. */
                  fetch(
                      ...params: CollapsedFetchEndpointParams<
                          SpecificService['endpoints'][EndpointPath]
                      >
                  ): Promise<FetchEndpointOutput<SpecificService['endpoints'][EndpointPath]>>;
              }
            : never;
    };
    webSockets: {
        [WebSocketPath in keyof SpecificService['webSockets']]: SpecificService['webSockets'][WebSocketPath] extends WebSocketDefinition
            ? SpecificService['webSockets'][WebSocketPath] & {
                  /** Connect to this WebSocket. */
                  connect(
                      ...params: CollapsedConnectWebSocketParams<
                          SpecificService['webSockets'][WebSocketPath],
                          false,
                          globalThis.WebSocket
                      >
                  ): Promise<
                      ClientWebSocket<
                          SpecificService['webSockets'][WebSocketPath],
                          globalThis.WebSocket
                      >
                  >;
              }
            : never;
    };
};

/**
 * Creates an API from the given service definition, with automatically generated endpoint fetch and
 * WebSocket connect methods.
 *
 * Use this to ship auto-generated API objects to internal or external teams so they have type safe
 * access to your REST and WebSocket server.
 *
 * The generated API can easily mocked by wrapping it in {@link makeMockApi}.
 *
 * @category Create API
 * @category Package : @rest-vir/define-service
 * @example
 *
 * ```ts
 * import {generateApi} from '@rest-vir/define-service';
 *
 * export const myApi = generateApi(myServiceDefinition);
 * ```
 *
 * @package [`@rest-vir/define-service`](https://www.npmjs.com/package/@rest-vir/define-service)
 */
export function generateApi<const SpecificService extends ServiceDefinition>(
    service: SpecificService,
): RestVirApi<SpecificService> {
    return {
        endpoints: mapObjectValues(service.endpoints, (endpointPath, endpointDefinition) => {
            return {
                ...endpointDefinition,
                fetch: (...params: CollapsedFetchEndpointParams<EndpointDefinition>) => {
                    return fetchEndpoint(endpointDefinition, ...params);
                },
            };
        }),
        webSockets: mapObjectValues(service.webSockets, (webSocketPath, webSocketDefinition) => {
            return {
                ...webSocketDefinition,
                connect: (
                    ...params: CollapsedConnectWebSocketParams<
                        WebSocketDefinition,
                        false,
                        globalThis.WebSocket
                    >
                ) => {
                    return connectWebSocket(webSocketDefinition, ...(params as [any]));
                },
            };
        }),
    } as RestVirApi<SpecificService>;
}

/**
 * Mock inputs for {@link makeMockApi}.
 *
 * @category Internal
 * @category Package : @rest-vir/define-service
 * @package [`@rest-vir/define-service`](https://www.npmjs.com/package/@rest-vir/define-service)
 */
export type RestVirApiMocks<
    Api extends RestVirApi<any>,
    WebSocketClass extends CommonWebSocket,
> = PartialWithUndefined<{
    /**
     * A custom fetch mock that will override the default, if provided. This can safely be omitted
     * to use the default JavaScript built-in global `fetch` function.
     *
     * See {@link createMockEndpointFetch} or {@link createMockEndpointResponse} for assistance
     * mocking this.
     *
     * @default globalThis.fetch
     */
    fetch?: (
        url: string,
        requestInit: RequestInit,
        endpoint?: Values<Api['endpoints']> | undefined,
    ) => MaybePromise<Response>;
    webSocketConstructor?: GenericConnectWebSocketParams<WebSocketClass>['webSocketConstructor'];
}>;

/**
 * Overwrites types for an existing {@link RestVirApi} instance with mocks. This is created by
 * {@link makeMockApi}.
 *
 * @category Internal
 * @category Package : @rest-vir/define-service
 * @package [`@rest-vir/define-service`](https://www.npmjs.com/package/@rest-vir/define-service)
 */
export type MockExistingApi<
    Api extends RestVirApi<any>,
    WebSocketClass extends CommonWebSocket,
> = Overwrite<
    Api,
    {
        webSockets: {
            [WebSocketPath in keyof Api['webSockets']]: Api['webSockets'][WebSocketPath] extends WebSocketDefinition
                ? Overwrite<
                      Api['webSockets'][WebSocketPath],
                      {
                          /** Connect to this WebSocket. */
                          connect(
                              ...params: CollapsedConnectWebSocketParams<
                                  Api['webSockets'][WebSocketPath],
                                  false,
                                  WebSocketClass
                              >
                          ): Promise<
                              ClientWebSocket<Api['webSockets'][WebSocketPath], WebSocketClass>
                          >;
                      }
                  >
                : never;
        };
    }
>;

/**
 * Overwrites an API's fetch and WebSocket connect methods with a mocked fetch function and a mocked
 * WebSocket constructor so you can have full control over them for unit-testing purposes. This way,
 * you can unit test your clients without spinning up a mock API server.
 *
 * @category Testing
 * @category Package : @rest-vir/define-service
 * @package [`@rest-vir/define-service`](https://www.npmjs.com/package/@rest-vir/define-service)
 */
export function makeMockApi<
    const Api extends RestVirApi<any>,
    const WebSocketClass extends CommonWebSocket,
>(
    api: Readonly<Api>,
    mocks: RestVirApiMocks<Api, WebSocketClass>,
): MockExistingApi<Api, WebSocketClass> {
    return {
        endpoints: mapObjectValues(api.endpoints, (endpointPath, endpointDefinition) => {
            return {
                ...endpointDefinition,
                fetch: (...params: CollapsedFetchEndpointParams<EndpointDefinition>) => {
                    return fetchEndpoint(endpointDefinition as EndpointDefinition, {
                        fetch: mocks.fetch as GenericFetchEndpointParams['fetch'],
                        ...params[0],
                    });
                },
            };
        }),
        webSockets: mapObjectValues(api.webSockets, (webSocketPath, webSocketDefinition) => {
            return {
                ...webSocketDefinition,
                connect: (
                    ...params: CollapsedConnectWebSocketParams<
                        WebSocketDefinition,
                        false,
                        WebSocketClass
                    >
                ) => {
                    return connectWebSocket(webSocketDefinition as WebSocketDefinition, {
                        webSocketConstructor: mocks.webSocketConstructor,
                        ...params[0],
                    });
                },
            };
        }),
    } as unknown as MockExistingApi<Api, WebSocketClass>;
}
