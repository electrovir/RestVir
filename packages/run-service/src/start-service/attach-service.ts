import {ensureError, HttpStatus, randomString, SelectFrom} from '@augment-vir/common';
import fastifyWs from '@fastify/websocket';
import {GenericServiceImplementation, ServiceImplementation} from '@rest-vir/implement-service';
import {type FastifyInstance} from 'fastify';
import {handleRoute, HandleRouteOptions} from '../handle-request/handle-route.js';
import {preHandler} from '../handle-request/request-handler.js';

declare module 'fastify' {
    interface FastifyRequest {
        restVirContext:
            | {
                  /**
                   * {@link attachService} can be called multiple times. Each time it is called, a
                   * new `AttachId` is generated and contexts generated by that attachment are
                   * stored in the request under that id.
                   */
                  [AttachId in string]: {
                      context: unknown;
                      requestData: unknown;
                  };
              }
            | undefined;
    }
}

/**
 * Attach all handlers for a {@link ServiceImplementation} to any existing Fastify server.
 *
 * @category Run Service
 * @category Package : @rest-vir/run-service
 * @example
 *
 * ```ts
 * import fastify from 'fastify';
 *
 * const server = fastify();
 *
 * attachService(service, myServiceImplementation);
 *
 * await server.listen({port: 3000});
 * ```
 *
 * @package [`@rest-vir/run-service`](https://www.npmjs.com/package/@rest-vir/run-service)
 */
export async function attachService(
    server: Readonly<FastifyInstance>,
    service: Readonly<
        SelectFrom<
            GenericServiceImplementation,
            {
                sockets: true;
                endpoints: true;
                serviceName: true;
                createContext: true;
                serviceOrigin: true;
                requiredOrigin: true;
                logger: true;
            }
        >
    >,
    options: HandleRouteOptions = {},
): Promise<void> {
    const attachId = randomString(32);

    if (!server.hasRequestDecorator('restVirContext')) {
        server.decorateRequest('restVirContext');
    }
    if (!server.hasRequestDecorator('ws')) {
        await server.register(fastifyWs);
    }

    server.addHook('preValidation', async (request, response) => {
        try {
            await preHandler(request, response, service, attachId);
        } catch (error) {
            service.logger.error(ensureError(error));
            if (options.throwErrorsForExternalHandling) {
                throw error;
            } else if (!response.sent) {
                response.statusCode = HttpStatus.InternalServerError;
                response.send();
            }
        }
    });

    Object.entries(service.sockets).forEach(
        ([
            path,
            socket,
        ]) => {
            server.get(path, {websocket: true}, async (webSocket, request) => {
                await handleRoute(webSocket, request, undefined, socket, attachId, options);
            });
        },
    );

    Object.entries(service.endpoints).forEach(
        ([
            path,
            endpoint,
        ]) => {
            server.all(path, async (request, response) => {
                await handleRoute(undefined, request, response, endpoint, attachId, options);
            });
        },
    );
}
